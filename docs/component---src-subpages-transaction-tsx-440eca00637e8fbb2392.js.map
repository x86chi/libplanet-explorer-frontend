{"version":3,"sources":["webpack:///./src/subpages/transaction.tsx","webpack:///./src/components/Timestamp.tsx","webpack:///./src/generated/graphql.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_generated_graphql__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_components_Timestamp__WEBPACK_IMPORTED_MODULE_3__","TransactionPage","_ref","location","id","a","createElement","variables","_ref2","data","loading","error","Fragment","JSON","stringify","message","transaction","transactionQuery","signerLink","signer","nonce","publicKey","signature","href","timestamp","updatedAddresses","map","address","index","key","actions","action","arguments","argument","value","formatOptions","hour","minute","year","month","day","Timestamp","date","Date","now","getFullYear","getMonth","getDate","timeStyle","_objectWithoutPropertiesLoose","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","toLocaleString","undefined","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","_templateObject4","BlockByHashDocument","_templateObject5","BlockByHashComponent","_templateObject6","TransactionByIdDocument","_templateObject7","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject8","TransactionsByAccountComponent"],"mappings":"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","file":"component---src-subpages-transaction-tsx-440eca00637e8fbb2392.js","sourcesContent":["import React from 'react';\nimport useQueryString from '../misc/useQueryString';\nimport { TransactionByIdComponent } from '../generated/graphql';\nimport { Link } from '@fluentui/react';\nimport Timestamp from '../components/Timestamp';\n\nimport { PageProps } from '../misc/pages';\n\ntype TransactionPageProps = PageProps;\n\nconst TransactionPage: React.FC<TransactionPageProps> = ({ location, id }) => {\n  return (\n    <TransactionByIdComponent variables={{ id }}>\n      {({ data, loading, error }) => {\n        if (loading)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>Loading&hellip;</p>\n            </>\n          );\n        if (error)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>\n                Failed to load {id} - {JSON.stringify(error.message)}\n              </p>\n            </>\n          );\n        const { transaction } = data!.transactionQuery!;\n        if (!transaction)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>\n                No such transaction: <code>{id}</code>\n              </p>\n            </>\n          );\n        // FIXME: We'd better to use absolute paths and make Gatsby to\n        // automatically rebase these absolute paths on the PATH_PREFIX\n        // configuration.\n        const signerLink = `../account/${transaction.signer}`;\n        return (\n          <>\n            <h2>Transaction Details</h2>\n            <dl>\n              <dt>Id</dt>\n              <dd>\n                <code>{transaction.id}</code>\n              </dd>\n              <dt>Nonce</dt>\n              <dd>{transaction.nonce} </dd>\n              <dt>Public Key</dt>\n              <dd>\n                <code>{transaction.publicKey}</code>\n              </dd>\n              <dt>Signature</dt>\n              <dd>\n                <code>{transaction.signature}</code>\n              </dd>\n              <dt>Signer</dt>\n              <dd>\n                <Link href={signerLink}>\n                  <code>{transaction.signer}</code>\n                </Link>\n              </dd>\n              <dt>Timestamp</dt>\n              <dd>\n                <Timestamp timestamp={transaction.timestamp} />\n              </dd>\n              <dt>Updated Addresses</dt>\n              {transaction.updatedAddresses.map((address, index) => (\n                <dd key={index}>\n                  {/*\n                  FIXME: We'd better to use absolute paths and make Gatsby to\n                  automatically rebase these absolute paths on the PATH_PREFIX\n                  configuration.\n                  */}\n                  <Link href={`../account/${address}`}>\n                    <code>{address}</code>\n                  </Link>\n                </dd>\n              ))}\n              <dt>Actions</dt>\n              {transaction.actions.map((action, index) => (\n                <dd key={index}>\n                  <dl>\n                    {action.arguments.map(argument => (\n                      <React.Fragment key={argument.key}>\n                        <dt>{argument.key}</dt>\n                        <dd>\n                          <pre>\n                            <code>\n                              {' '}\n                              {JSON.stringify(argument.value, null, 2)}{' '}\n                            </code>\n                          </pre>\n                        </dd>\n                      </React.Fragment>\n                    ))}\n                  </dl>\n                </dd>\n              ))}\n            </dl>\n          </>\n        );\n      }}\n    </TransactionByIdComponent>\n  );\n};\n\nexport default TransactionPage;\n","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Address: any;\n  ByteString: any;\n  DateTimeOffset: any;\n  Date: any;\n  DateTime: any;\n  Decimal: any;\n  Milliseconds: any;\n  Seconds: any;\n};\n\nexport type Action = {\n  __typename?: 'Action';\n  arguments: Array<ActionArgumentType>;\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType';\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type Block = {\n  __typename?: 'Block';\n  difficulty: Scalars['Int'];\n  hash: Scalars['ID'];\n  index: Scalars['Int'];\n  miner: Scalars['Address'];\n  nonce: Scalars['ByteString'];\n  previousBlock?: Maybe<Block>;\n  timestamp: Scalars['DateTimeOffset'];\n  transactions: Array<Transaction>;\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery';\n  block?: Maybe<Block>;\n  blocks: Array<Block>;\n};\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>;\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  blockQuery?: Maybe<BlockQuery>;\n  transactionQuery?: Maybe<TransactionQuery>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  actions: Array<Action>;\n  id: Scalars['ID'];\n  nonce: Scalars['Int'];\n  publicKey: Scalars['ByteString'];\n  signature: Scalars['ByteString'];\n  signer: Scalars['Address'];\n  timestamp: Scalars['DateTimeOffset'];\n  updatedAddresses: Array<Scalars['Address']>;\n};\n\nexport type TransactionQuery = {\n  __typename?: 'TransactionQuery';\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n};\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\nexport type BlockCommonFragment = { __typename?: 'Block' } & Pick<\n  Block,\n  'hash' | 'index' | 'difficulty' | 'timestamp'\n>;\n\nexport type TransactionCommonFragment = { __typename?: 'Transaction' } & Pick<\n  Transaction,\n  | 'id'\n  | 'nonce'\n  | 'publicKey'\n  | 'signature'\n  | 'signer'\n  | 'timestamp'\n  | 'updatedAddresses'\n> & {\n    actions: Array<\n      { __typename?: 'Action' } & {\n        arguments: Array<\n          { __typename?: 'ActionArgumentType' } & Pick<\n            ActionArgumentType,\n            'key' | 'value'\n          >\n        >;\n      }\n    >;\n  };\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  excludeEmptyTxs: Scalars['Boolean'];\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type BlockListQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<\n        { __typename?: 'Block' } & Pick<Block, 'miner'> & {\n            transactions: Array<\n              { __typename?: 'Transaction' } & Pick<Transaction, 'id'>\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type BlockListByMinerQueryVariables = {\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type BlockListByMinerQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<{ __typename?: 'Block' } & BlockCommonFragment>;\n    }\n  >;\n};\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockByHashQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      block: Maybe<\n        { __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & {\n            previousBlock: Maybe<\n              { __typename?: 'Block' } & Pick<Block, 'hash'>\n            >;\n            transactions: Array<\n              { __typename?: 'Transaction' } & TransactionCommonFragment\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc: Scalars['Boolean'];\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n};\n\nexport type TransactionListQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionByIdQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transaction: Maybe<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>;\n};\n\nexport type TransactionsByAccountQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\nexport const BlockCommonFragmentDoc = gql`\n  fragment BlockCommon on Block {\n    hash\n    index\n    difficulty\n    timestamp\n  }\n`;\nexport const TransactionCommonFragmentDoc = gql`\n  fragment TransactionCommon on Transaction {\n    actions {\n      arguments {\n        key\n        value\n      }\n    }\n    id\n    nonce\n    publicKey\n    signature\n    signer\n    timestamp\n    updatedAddresses\n  }\n`;\nexport const BlockListDocument = gql`\n  query BlockList(\n    $offset: Int!\n    $limit: Int!\n    $excludeEmptyTxs: Boolean!\n    $miner: Address\n  ) {\n    blockQuery {\n      blocks(\n        desc: true\n        offset: $offset\n        limit: $limit\n        excludeEmptyTxs: $excludeEmptyTxs\n        miner: $miner\n      ) {\n        ...BlockCommon\n        miner\n        transactions {\n          id\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListQuery,\n    BlockListQueryVariables\n  >,\n  'query'\n> &\n  ({ variables: BlockListQueryVariables; skip?: boolean } | { skip: boolean });\n\nexport const BlockListComponent = (props: BlockListComponentProps) => (\n  <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables>\n    query={BlockListDocument}\n    {...props}\n  />\n);\n\nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListQuery,\n  BlockListQueryVariables\n> &\n  TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >(BlockListDocument, {\n    alias: 'withBlockList',\n    ...operationOptions,\n  });\n}\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<\n  BlockListQuery,\n  BlockListQueryVariables\n>;\nexport const BlockListByMinerDocument = gql`\n  query BlockListByMiner($miner: Address) {\n    blockQuery {\n      blocks(miner: $miner) {\n        ...BlockCommon\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListByMinerComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockListByMinerComponent = (\n  props: BlockListByMinerComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables\n  >\n    query={BlockListByMinerDocument}\n    {...props}\n  />\n);\n\nexport type BlockListByMinerProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListByMinerQuery,\n  BlockListByMinerQueryVariables\n> &\n  TChildProps;\nexport function withBlockListByMiner<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables,\n    BlockListByMinerProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables,\n    BlockListByMinerProps<TChildProps>\n  >(BlockListByMinerDocument, {\n    alias: 'withBlockListByMiner',\n    ...operationOptions,\n  });\n}\nexport type BlockListByMinerQueryResult = ApolloReactCommon.QueryResult<\n  BlockListByMinerQuery,\n  BlockListByMinerQueryVariables\n>;\nexport const BlockByHashDocument = gql`\n  query BlockByHash($hash: ID) {\n    blockQuery {\n      block(hash: $hash) {\n        ...BlockCommon\n        miner\n        nonce\n        previousBlock {\n          hash\n        }\n        transactions {\n          ...TransactionCommon\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n  ${TransactionCommonFragmentDoc}\n`;\nexport type BlockByHashComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockByHashQuery,\n    BlockByHashQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n  <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables>\n    query={BlockByHashDocument}\n    {...props}\n  />\n);\n\nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n> &\n  TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >(BlockByHashDocument, {\n    alias: 'withBlockByHash',\n    ...operationOptions,\n  });\n}\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n>;\nexport const TransactionListDocument = gql`\n  query TransactionList(\n    $signer: Address\n    $involvedAddress: Address\n    $desc: Boolean!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    transactionQuery {\n      transactions(\n        signer: $signer\n        involvedAddress: $involvedAddress\n        desc: $desc\n        offset: $offset\n        limit: $limit\n      ) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >,\n  'query'\n> &\n  (\n    | { variables: TransactionListQueryVariables; skip?: boolean }\n    | { skip: boolean });\n\nexport const TransactionListComponent = (\n  props: TransactionListComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >\n    query={TransactionListDocument}\n    {...props}\n  />\n);\n\nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionListQuery,\n  TransactionListQueryVariables\n> &\n  TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >(TransactionListDocument, {\n    alias: 'withTransactionList',\n    ...operationOptions,\n  });\n}\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<\n  TransactionListQuery,\n  TransactionListQueryVariables\n>;\nexport const TransactionByIdDocument = gql`\n  query TransactionById($id: ID) {\n    transactionQuery {\n      transaction(id: $id) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionByIdComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionByIdComponent = (\n  props: TransactionByIdComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >\n    query={TransactionByIdDocument}\n    {...props}\n  />\n);\n\nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n> &\n  TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >(TransactionByIdDocument, {\n    alias: 'withTransactionById',\n    ...operationOptions,\n  });\n}\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n>;\nexport const TransactionsByAccountDocument = gql`\n  query TransactionsByAccount($involvedAddress: Address) {\n    transactionQuery {\n      transactions(involvedAddress: $involvedAddress, desc: true) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionsByAccountComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionsByAccountComponent = (\n  props: TransactionsByAccountComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >\n    query={TransactionsByAccountDocument}\n    {...props}\n  />\n);\n\nexport type TransactionsByAccountProps<\n  TChildProps = {}\n> = ApolloReactHoc.DataProps<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n> &\n  TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >(TransactionsByAccountDocument, {\n    alias: 'withTransactionsByAccount',\n    ...operationOptions,\n  });\n}\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n>;\n"],"sourceRoot":""}
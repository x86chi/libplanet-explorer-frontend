{"version":3,"sources":["webpack:///./src/subpages/list.tsx","webpack:///./src/components/Timestamp.tsx","webpack:///./src/generated/graphql.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/components/BlockList.tsx","webpack:///./src/components/OffsetSwitch.tsx","webpack:///./src/misc/columns.tsx","webpack:///./src/misc/useOffset.ts","webpack:///./src/misc/useSearchParams.ts"],"names":["ListPage","_ref","location","_useOffset","useOffset","offset","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","label","checked","onChange","_generated_graphql__WEBPACK_IMPORTED_MODULE_3__","variables","limit","_ref2","data","loading","error","console","message","blocks","blockQuery","Object","assign","key","name","minWidth","maxWidth","commonProps","isSortedDescending","isPadded","onRender","block","index","Error","beforeBlock","Math","min","length","beforeTimestamp","Date","parse","timestamp","nowTimestamp","Fragment","SummaryCards","_components_OffsetSwitch__WEBPACK_IMPORTED_MODULE_7__","disable","older","newer","_components_BlockList__WEBPACK_IMPORTED_MODULE_6__","columns","_ref3","Cards","interval","difficulty","totalTxNumber","timestamps","map","i","difficulties","reduce","d","sum","transactions","b","_ref4","className","floor","toLocaleString","formatOptions","hour","minute","year","month","day","Timestamp","date","now","getFullYear","getMonth","getDate","timeStyle","_objectWithoutPropertiesLoose","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","undefined","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","_templateObject4","BlockByHashDocument","_templateObject5","BlockByHashComponent","_templateObject6","TransactionByIdDocument","_templateObject7","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject8","TransactionsByAccountComponent","useQueryString","useMemo","search","substr","useCallback","queryString","path","pathname","withPrefix","navigate","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_3__","_fluentui_react_lib_ShimmeredDetailsList__WEBPACK_IMPORTED_MODULE_4__","BlockList","setKey","items","selectionMode","SelectionMode","none","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","enableShimmer","onItemInvoked","hash","OffsetSwitch","onClick","disabled","css","isRowHeader","isResizable","isSorted","fieldName","iconName","isIconOnly","react__WEBPACK_IMPORTED_MODULE_2___default","Number","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","href","_components_Timestamp__WEBPACK_IMPORTED_MODULE_4__","miner","_ref5","_ref6","keyName","_useSearchParams","_useQueryString","setQueryString","querystring","searchParams","stringify","useSearchParams","setSearchParams","_searchParams$offset","setOffset","newSearchParams"],"mappings":"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","file":"component---src-subpages-list-tsx-54e557fa311cb6a65164.js","sourcesContent":["import React, { useState } from 'react';\nimport { Checkbox, IColumn, DefaultButton } from '@fluentui/react';\n\nimport { Block, BlockListComponent } from '../generated/graphql';\n\nimport useOffset, { limit } from '../misc/useOffset';\nimport { columns, commonProps } from '../misc/columns';\n\nimport BlockList from '../components/BlockList';\nimport OffsetSwitch from '../components/OffsetSwitch';\n\nimport { PageProps } from '../misc/pages';\n\ntype ListPageProps = PageProps;\n\nconst POLL_INTERVAL = 2000;\n\nconst ListPage: React.FC<ListPageProps> = ({ location }) => {\n  const [offset, olderHandler, newerHandler] = useOffset(location);\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <main>\n      <Checkbox\n        label=\"Include blocks having any tx\"\n        checked={excludeEmptyTxs}\n        onChange={() => setExcludeEmptyTxs(!excludeEmptyTxs)}\n      />\n      <BlockListComponent variables={{ offset, limit, excludeEmptyTxs }}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n          const blocks =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? (data.blockQuery.blocks as Block[])\n              : null;\n\n          const timeTaken: IColumn = {\n            key: 'columnTimeTaken',\n            name: 'Time Taken',\n            minWidth: 50,\n            maxWidth: 200,\n            ...commonProps,\n            isSortedDescending: true,\n            data: 'string',\n            isPadded: true,\n            onRender: (block: Block, index: number) => {\n              if (blocks === null) throw Error('blocks is null');\n              // FIX TODO: beforeBlock index is not available\n              const beforeBlock =\n                blocks[Math.min(index! + 1, block.length - 1)];\n              const beforeTimestamp = Date.parse(beforeBlock.timestamp);\n              const nowTimestamp = Date.parse(block.timestamp);\n              return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n            },\n          };\n          return (\n            <>\n              <SummaryCards blocks={blocks} />\n              <OffsetSwitch\n                olderHandler={olderHandler}\n                newerHandler={newerHandler}\n                disable={{ older: loading || offset < 1, newer: loading }}\n              />\n              <BlockList blocks={blocks} loading={loading} columns={columns} />\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </main>\n  );\n};\n\nexport default ListPage;\n\nexport interface SummaryCardsProps {\n  blocks: Block[] | null;\n}\n\nconst SummaryCards: React.FC<SummaryCardsProps> = ({ blocks }) => {\n  if (blocks === null)\n    return <Cards interval={0} difficulty={0} totalTxNumber={0} />;\n\n  const timestamps: Date[] = blocks.map(block => new Date(block.timestamp));\n\n  let interval = 0;\n  for (let i = 0; i < timestamps.length - 1; i++) {\n    interval += +timestamps[i] - +timestamps[i + 1];\n  }\n  interval /= (timestamps.length - 1) * 1000;\n\n  const difficulties = blocks.map(block => block.difficulty);\n  const difficulty =\n    difficulties.reduce((d, sum) => d + sum, 0) / difficulties.length;\n\n  const txNumbers = blocks.map(block => block!.transactions.length);\n  const totalTxNumber = txNumbers.reduce((a, b) => a + b, 0);\n  return (\n    <Cards\n      interval={interval}\n      difficulty={difficulty}\n      totalTxNumber={totalTxNumber}\n    />\n  );\n};\n\ninterface CardsProps {\n  interval: number;\n  difficulty: number;\n  totalTxNumber: number;\n}\n\nconst Cards: React.FC<CardsProps> = ({\n  interval,\n  difficulty,\n  totalTxNumber,\n}) => (\n  <div className=\"cards\">\n    <div className=\"card\" key=\"interval\">\n      <strong>{interval}</strong> sec\n      <p>Average interval in this page</p>\n    </div>\n    <div className=\"card\" key=\"difficulty\">\n      <strong>{Math.floor(difficulty).toLocaleString()}</strong>\n      <p>Average difficulty in this page</p>\n    </div>\n    <div className=\"card\" key=\"total-tx-number\">\n      <strong>{Math.floor(totalTxNumber).toLocaleString()}</strong>\n      <p>Total txs in this page</p>\n    </div>\n  </div>\n);\n","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Address: any;\n  ByteString: any;\n  DateTimeOffset: any;\n  Date: any;\n  DateTime: any;\n  Decimal: any;\n  Milliseconds: any;\n  Seconds: any;\n};\n\nexport type Action = {\n  __typename?: 'Action';\n  arguments: Array<ActionArgumentType>;\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType';\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type Block = {\n  __typename?: 'Block';\n  difficulty: Scalars['Int'];\n  hash: Scalars['ID'];\n  index: Scalars['Int'];\n  miner: Scalars['Address'];\n  nonce: Scalars['ByteString'];\n  previousBlock?: Maybe<Block>;\n  timestamp: Scalars['DateTimeOffset'];\n  transactions: Array<Transaction>;\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery';\n  block?: Maybe<Block>;\n  blocks: Array<Block>;\n};\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>;\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  blockQuery?: Maybe<BlockQuery>;\n  transactionQuery?: Maybe<TransactionQuery>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  actions: Array<Action>;\n  id: Scalars['ID'];\n  nonce: Scalars['Int'];\n  publicKey: Scalars['ByteString'];\n  signature: Scalars['ByteString'];\n  signer: Scalars['Address'];\n  timestamp: Scalars['DateTimeOffset'];\n  updatedAddresses: Array<Scalars['Address']>;\n};\n\nexport type TransactionQuery = {\n  __typename?: 'TransactionQuery';\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n};\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\nexport type BlockCommonFragment = { __typename?: 'Block' } & Pick<\n  Block,\n  'hash' | 'index' | 'difficulty' | 'timestamp'\n>;\n\nexport type TransactionCommonFragment = { __typename?: 'Transaction' } & Pick<\n  Transaction,\n  | 'id'\n  | 'nonce'\n  | 'publicKey'\n  | 'signature'\n  | 'signer'\n  | 'timestamp'\n  | 'updatedAddresses'\n> & {\n    actions: Array<\n      { __typename?: 'Action' } & {\n        arguments: Array<\n          { __typename?: 'ActionArgumentType' } & Pick<\n            ActionArgumentType,\n            'key' | 'value'\n          >\n        >;\n      }\n    >;\n  };\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  excludeEmptyTxs: Scalars['Boolean'];\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type BlockListQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<\n        { __typename?: 'Block' } & Pick<Block, 'miner'> & {\n            transactions: Array<\n              { __typename?: 'Transaction' } & Pick<Transaction, 'id'>\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type BlockListByMinerQueryVariables = {\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type BlockListByMinerQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<{ __typename?: 'Block' } & BlockCommonFragment>;\n    }\n  >;\n};\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockByHashQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      block: Maybe<\n        { __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & {\n            previousBlock: Maybe<\n              { __typename?: 'Block' } & Pick<Block, 'hash'>\n            >;\n            transactions: Array<\n              { __typename?: 'Transaction' } & TransactionCommonFragment\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc: Scalars['Boolean'];\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n};\n\nexport type TransactionListQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionByIdQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transaction: Maybe<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>;\n};\n\nexport type TransactionsByAccountQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\nexport const BlockCommonFragmentDoc = gql`\n  fragment BlockCommon on Block {\n    hash\n    index\n    difficulty\n    timestamp\n  }\n`;\nexport const TransactionCommonFragmentDoc = gql`\n  fragment TransactionCommon on Transaction {\n    actions {\n      arguments {\n        key\n        value\n      }\n    }\n    id\n    nonce\n    publicKey\n    signature\n    signer\n    timestamp\n    updatedAddresses\n  }\n`;\nexport const BlockListDocument = gql`\n  query BlockList(\n    $offset: Int!\n    $limit: Int!\n    $excludeEmptyTxs: Boolean!\n    $miner: Address\n  ) {\n    blockQuery {\n      blocks(\n        desc: true\n        offset: $offset\n        limit: $limit\n        excludeEmptyTxs: $excludeEmptyTxs\n        miner: $miner\n      ) {\n        ...BlockCommon\n        miner\n        transactions {\n          id\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListQuery,\n    BlockListQueryVariables\n  >,\n  'query'\n> &\n  ({ variables: BlockListQueryVariables; skip?: boolean } | { skip: boolean });\n\nexport const BlockListComponent = (props: BlockListComponentProps) => (\n  <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables>\n    query={BlockListDocument}\n    {...props}\n  />\n);\n\nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListQuery,\n  BlockListQueryVariables\n> &\n  TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >(BlockListDocument, {\n    alias: 'withBlockList',\n    ...operationOptions,\n  });\n}\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<\n  BlockListQuery,\n  BlockListQueryVariables\n>;\nexport const BlockListByMinerDocument = gql`\n  query BlockListByMiner($miner: Address) {\n    blockQuery {\n      blocks(miner: $miner) {\n        ...BlockCommon\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListByMinerComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockListByMinerComponent = (\n  props: BlockListByMinerComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables\n  >\n    query={BlockListByMinerDocument}\n    {...props}\n  />\n);\n\nexport type BlockListByMinerProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListByMinerQuery,\n  BlockListByMinerQueryVariables\n> &\n  TChildProps;\nexport function withBlockListByMiner<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables,\n    BlockListByMinerProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables,\n    BlockListByMinerProps<TChildProps>\n  >(BlockListByMinerDocument, {\n    alias: 'withBlockListByMiner',\n    ...operationOptions,\n  });\n}\nexport type BlockListByMinerQueryResult = ApolloReactCommon.QueryResult<\n  BlockListByMinerQuery,\n  BlockListByMinerQueryVariables\n>;\nexport const BlockByHashDocument = gql`\n  query BlockByHash($hash: ID) {\n    blockQuery {\n      block(hash: $hash) {\n        ...BlockCommon\n        miner\n        nonce\n        previousBlock {\n          hash\n        }\n        transactions {\n          ...TransactionCommon\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n  ${TransactionCommonFragmentDoc}\n`;\nexport type BlockByHashComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockByHashQuery,\n    BlockByHashQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n  <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables>\n    query={BlockByHashDocument}\n    {...props}\n  />\n);\n\nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n> &\n  TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >(BlockByHashDocument, {\n    alias: 'withBlockByHash',\n    ...operationOptions,\n  });\n}\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n>;\nexport const TransactionListDocument = gql`\n  query TransactionList(\n    $signer: Address\n    $involvedAddress: Address\n    $desc: Boolean!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    transactionQuery {\n      transactions(\n        signer: $signer\n        involvedAddress: $involvedAddress\n        desc: $desc\n        offset: $offset\n        limit: $limit\n      ) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >,\n  'query'\n> &\n  (\n    | { variables: TransactionListQueryVariables; skip?: boolean }\n    | { skip: boolean });\n\nexport const TransactionListComponent = (\n  props: TransactionListComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >\n    query={TransactionListDocument}\n    {...props}\n  />\n);\n\nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionListQuery,\n  TransactionListQueryVariables\n> &\n  TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >(TransactionListDocument, {\n    alias: 'withTransactionList',\n    ...operationOptions,\n  });\n}\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<\n  TransactionListQuery,\n  TransactionListQueryVariables\n>;\nexport const TransactionByIdDocument = gql`\n  query TransactionById($id: ID) {\n    transactionQuery {\n      transaction(id: $id) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionByIdComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionByIdComponent = (\n  props: TransactionByIdComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >\n    query={TransactionByIdDocument}\n    {...props}\n  />\n);\n\nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n> &\n  TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >(TransactionByIdDocument, {\n    alias: 'withTransactionById',\n    ...operationOptions,\n  });\n}\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n>;\nexport const TransactionsByAccountDocument = gql`\n  query TransactionsByAccount($involvedAddress: Address) {\n    transactionQuery {\n      transactions(involvedAddress: $involvedAddress, desc: true) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionsByAccountComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionsByAccountComponent = (\n  props: TransactionsByAccountComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >\n    query={TransactionsByAccountDocument}\n    {...props}\n  />\n);\n\nexport type TransactionsByAccountProps<\n  TChildProps = {}\n> = ApolloReactHoc.DataProps<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n> &\n  TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >(TransactionsByAccountDocument, {\n    alias: 'withTransactionsByAccount',\n    ...operationOptions,\n  });\n}\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n>;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import React from 'react';\nimport { navigate } from 'gatsby';\nimport {\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from '@fluentui/react/lib/DetailsList';\nimport { ShimmeredDetailsList } from '@fluentui/react/lib/ShimmeredDetailsList';\nimport { Block } from '../generated/graphql';\n\ninterface BlockListProps {\n  blocks: Block[] | null;\n  loading: boolean;\n  columns: IColumn[];\n}\n\nconst POLL_INTERVAL = 2000;\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks, loading, columns }) => (\n  <ShimmeredDetailsList\n    setKey=\"set\"\n    items={blocks === null || loading ? [] : blocks}\n    columns={columns}\n    selectionMode={SelectionMode.none}\n    layoutMode={DetailsListLayoutMode.justified}\n    isHeaderVisible={true}\n    enableShimmer={loading}\n    onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n  />\n);\n\nexport default BlockList;\n","import React from 'react';\n\nimport { css } from 'emotion';\nimport { DefaultButton } from '@fluentui/react';\n\ninterface OffsetSwitchProps {\n  newerHandler: () => void;\n  olderHandler: () => void;\n  disable: { older: boolean; newer: boolean };\n}\n\nconst OffsetSwitch: React.FC<OffsetSwitchProps> = ({\n  newerHandler,\n  olderHandler,\n  disable,\n}) => (\n  <div className=\"nav\">\n    <DefaultButton\n      onClick={newerHandler}\n      disabled={disable.older}\n      className={css`\n        margin-right: 5px;\n      `}>\n      &larr; Newer\n    </DefaultButton>\n    <DefaultButton disabled={disable.newer} onClick={olderHandler}>\n      Older &rarr;\n    </DefaultButton>\n  </div>\n);\n\nexport default OffsetSwitch;\n","import React from 'react';\nimport { Link } from '@fluentui/react';\nimport { IColumn } from '@fluentui/react/lib/DetailsList';\n\nimport Timestamp from '../components/Timestamp';\nimport { Block } from '../generated/graphql';\n\nexport const commonProps = {\n  isRowHeader: true,\n  isResizable: true,\n  isSorted: false,\n};\n\nexport const columns = [\n  {\n    key: 'columnIndex',\n    name: 'Index',\n    fieldName: 'index',\n    iconName: 'NumberSymbol',\n    isIconOnly: true,\n    minWidth: 5,\n    maxWidth: 41,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ index }: Block) => <>{Number(index).toLocaleString()}</>,\n  },\n  {\n    key: 'columnHash',\n    name: 'Block Hash',\n    fieldName: 'hash',\n    minWidth: 5,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ hash }: Block) => <Link href={`./block/${hash}`}>{hash}</Link>,\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp }: Block) => <Timestamp timestamp={timestamp} />,\n  },\n  {\n    key: 'coulmnMiner',\n    name: 'Miner',\n    fieldName: 'miner',\n    minWidth: 123,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ miner }: Block) => (\n      <Link href={`./account/${miner}`}>{miner}</Link>\n    ),\n  },\n  {\n    key: 'columnDifficulty',\n    name: 'Difficulty',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ difficulty }: Block) => (\n      <>{Math.floor(difficulty).toLocaleString()}</>\n    ),\n  },\n  {\n    key: 'columnTxNumber',\n    name: 'Tx #',\n    minWidth: 5,\n    maxWidth: 40,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ transactions }: Block) => <>{transactions.length}</>,\n  },\n];\n","import { useState } from 'react';\n\nimport useSearchParams from './useSearchParams';\n\nexport const limit = 21;\nexport default function useOffset(location: Location, keyName = 'offset') {\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const { offset = 0 } = searchParams;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      const newSearchParams = { ...searchParams };\n      delete newSearchParams[keyName];\n      setSearchParams(newSearchParams);\n    } else {\n      searchParams[keyName] = offset;\n      setSearchParams(searchParams);\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  return [offset, olderHandler, newerHandler] as const;\n}\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: any) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n"],"sourceRoot":""}
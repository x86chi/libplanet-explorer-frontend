{"version":3,"sources":["webpack:///./src/subpages/account.tsx","webpack:///./src/components/Timestamp.tsx","webpack:///./src/generated/graphql.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/components/BlockList.tsx","webpack:///./src/components/OffsetSwitch.tsx","webpack:///./src/misc/columns.tsx","webpack:///./src/misc/useOffset.ts","webpack:///./src/misc/useSearchParams.ts"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","_fluentui_react__WEBPACK_IMPORTED_MODULE_4__","_fluentui_react__WEBPACK_IMPORTED_MODULE_5__","_fluentui_react__WEBPACK_IMPORTED_MODULE_6__","_components_Wrapper__WEBPACK_IMPORTED_MODULE_7__","_components_BlockList__WEBPACK_IMPORTED_MODULE_8__","_components_OffsetSwitch__WEBPACK_IMPORTED_MODULE_9__","_components_Timestamp__WEBPACK_IMPORTED_MODULE_10__","_generated_graphql__WEBPACK_IMPORTED_MODULE_11__","_misc_useOffset__WEBPACK_IMPORTED_MODULE_12__","_misc_columns__WEBPACK_IMPORTED_MODULE_13__","TransactionsList","_ref5","transactions","columns","key","name","fieldName","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","_ref6","id","a","createElement","href","_ref7","signer","_ref8","timestamp","items","selectionMode","SelectionMode","none","getKey","tx","setKey","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","onItemInvoked","_ref9","navigate","AccountPage","_ref","location","hash","_useOffset","useOffset","offset","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","variables","involvedAddress","_ref2","loading","error","transactionQuery","signedTransactions","involvedTransactions","forEach","push","missingNonces","i","length","prevNonce","nonce","missingNonce","numOfSigned","numOfInvolved","numOfMissingNonces","Fragment","map","limit","miner","_ref4","console","message","blocks","blockQuery","label","checked","disabled","onChange","disable","older","newer","formatOptions","hour","minute","year","month","day","Timestamp","date","Date","now","getFullYear","getMonth","getDate","timeStyle","_objectWithoutPropertiesLoose","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","toLocaleString","undefined","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","_templateObject4","BlockByHashDocument","_templateObject5","BlockByHashComponent","_templateObject6","TransactionByIdDocument","_templateObject7","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject8","TransactionsByAccountComponent","useQueryString","useMemo","search","substr","useCallback","queryString","path","pathname","withPrefix","gatsby__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_3__","_fluentui_react_lib_ShimmeredDetailsList__WEBPACK_IMPORTED_MODULE_4__","BlockList","enableShimmer","block","OffsetSwitch","className","onClick","css","commonProps","iconName","isIconOnly","index","react__WEBPACK_IMPORTED_MODULE_2___default","Number","_ref3","_components_Timestamp__WEBPACK_IMPORTED_MODULE_4__","difficulty","Math","floor","keyName","_useSearchParams","_useQueryString","setQueryString","querystring","parse","searchParams","stringify","useSearchParams","setSearchParams","_searchParams$offset","setOffset","newSearchParams"],"mappings":"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","file":"component---src-subpages-account-tsx-648140d6eecd74a1f8f6.js","sourcesContent":["import React, { Children, useState } from 'react';\nimport { navigate } from 'gatsby-link';\nimport {\n  Link,\n  DetailsListLayoutMode,\n  SelectionMode,\n  DetailsList,\n  Checkbox,\n  IColumn,\n} from '@fluentui/react';\n\nimport Wrapper from '../components/Wrapper';\nimport BlockList from '../components/BlockList';\nimport OffsetSwitch from '../components/OffsetSwitch';\nimport Timestamp from '../components/Timestamp';\n\nimport {\n  Transaction,\n  TransactionsByAccountComponent,\n  Block,\n  BlockListComponent,\n} from '../generated/graphql';\n\nimport { IndexPageProps } from '../pages';\n\nimport useQueryString from '../misc/useQueryString';\nimport useOffset, { limit } from '../misc/useOffset';\nimport { columns } from '../misc/columns';\nimport { SubPage } from '../misc/pages';\n\ntype AccountPageProps = SubPage;\n\nconst AccountPage: React.FC<AccountPageProps> = ({ location, id: hash }) => {\n  const [offset, olderHandler, newerHandler] = useOffset(\n    location,\n    'mined_blocks'\n  );\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <Wrapper>\n      <h1>Account Details</h1>\n      <p>\n        Account Number: <b>{hash}</b>\n      </p>\n\n      <TransactionsByAccountComponent variables={{ involvedAddress: hash }}>\n        {({ data, loading, error }) => {\n          if (loading) return <p>loading&hellip;</p>;\n          if (error) return <p>error!</p>;\n          const { transactions } = data!.transactionQuery!;\n          if (!transactions) {\n            return <p>There are no transactions.</p>;\n          }\n\n          const signedTransactions: Transaction[] = [],\n            involvedTransactions: Transaction[] = [];\n          transactions.forEach(tx => {\n            if (tx.signer === hash) {\n              signedTransactions.push(tx);\n            } else {\n              involvedTransactions.push(tx);\n            }\n          });\n\n          const missingNonces: number[] = [];\n          for (let i = 1; i < signedTransactions.length; ++i) {\n            const prevNonce = signedTransactions[i - 1].nonce;\n            const nonce = signedTransactions[i].nonce;\n            if (prevNonce === nonce - 1) continue;\n            for (\n              let missingNonce = prevNonce + 1;\n              missingNonce < nonce;\n              ++missingNonce\n            ) {\n              missingNonces.push(missingNonce);\n            }\n          }\n\n          const numOfSigned = signedTransactions.length;\n          const numOfInvolved = involvedTransactions.length;\n          const numOfMissingNonces = missingNonces.length;\n\n          return (\n            <>\n              <h2>Signed Transactions: {numOfSigned}</h2>\n              {numOfSigned > 0 ? (\n                <TransactionsList\n                  transactions={\n                    loading\n                      ? []\n                      : (signedTransactions as NonNullable<Transaction[]>)\n                  }\n                />\n              ) : (\n                <div>No transactions of this type</div>\n              )}\n              <h2>Involved Transactions: {numOfInvolved}</h2>\n              {numOfInvolved ? (\n                <TransactionsList\n                  transactions={\n                    loading\n                      ? []\n                      : (involvedTransactions as NonNullable<Transaction[]>)\n                  }\n                />\n              ) : (\n                <div>No transactions of this type</div>\n              )}\n              <h2>Missing Nonces: {numOfMissingNonces}</h2>\n              {numOfMissingNonces ? (\n                missingNonces.map(nonce => <p>{nonce}</p>)\n              ) : (\n                <div>No missing nonces.</div>\n              )}\n            </>\n          );\n        }}\n      </TransactionsByAccountComponent>\n      <h2>Mined Blocks</h2>\n      <BlockListComponent\n        variables={{ offset, limit, excludeEmptyTxs, miner: hash }}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n          const blocks =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? (data.blockQuery.blocks as Block[])\n              : null;\n          return (\n            <>\n              <Checkbox\n                label=\"Include blocks having any tx\"\n                checked={excludeEmptyTxs}\n                disabled={loading}\n                onChange={() => {\n                  setExcludeEmptyTxs(!excludeEmptyTxs);\n                }}\n              />\n              <OffsetSwitch\n                olderHandler={olderHandler}\n                newerHandler={newerHandler}\n                disable={{ older: loading || offset < 1, newer: loading }}\n              />\n              <BlockList blocks={blocks} loading={loading} columns={columns} />\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </Wrapper>\n  );\n};\n\ninterface TxListProps {\n  transactions: Pick<\n    Transaction,\n    'id' | 'nonce' | 'signature' | 'signer' | 'timestamp'\n  >[];\n}\n\nconst TransactionsList: React.FC<TxListProps> = ({ transactions }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'coulmnNonce',\n      name: 'Nonce',\n      fieldName: 'nonce',\n      minWidth: 5,\n      maxWidth: 50,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'columnId',\n      name: 'ID',\n      fieldName: 'id',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      onRender: ({ id }: Transaction) => (\n        <Link href={`../transaction/${id}`}>{id}</Link>\n      ),\n    },\n    {\n      key: 'columnSignature',\n      name: 'Signature',\n      fieldName: 'signature',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n    {\n      key: 'columnSigner',\n      name: 'Signer',\n      fieldName: 'signer',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n      onRender: ({ signer }: Transaction) => (\n        // FIXME: We'd better to use absolute paths and make Gatsby automatically\n        // to rebase these absolute paths on the PATH_PREFIX configuration.\n        <Link href={`./${signer}`}>{signer}</Link>\n      ),\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n      onRender: ({ timestamp }: Transaction) => (\n        <Timestamp timestamp={timestamp} />\n      ),\n    },\n  ];\n\n  return (\n    <DetailsList\n      items={transactions}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      getKey={(tx: Transaction) => tx.id}\n      setKey=\"set\"\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      onItemInvoked={({ id }: Transaction) => navigate(`../transaction/${id}`)}\n    />\n  );\n};\n\nexport default AccountPage;\n","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Address: any;\n  ByteString: any;\n  DateTimeOffset: any;\n  Date: any;\n  DateTime: any;\n  Decimal: any;\n  Milliseconds: any;\n  Seconds: any;\n};\n\nexport type Action = {\n  __typename?: 'Action';\n  arguments: Array<ActionArgumentType>;\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType';\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type Block = {\n  __typename?: 'Block';\n  difficulty: Scalars['Int'];\n  hash: Scalars['ID'];\n  index: Scalars['Int'];\n  miner: Scalars['Address'];\n  nonce: Scalars['ByteString'];\n  previousBlock?: Maybe<Block>;\n  timestamp: Scalars['DateTimeOffset'];\n  transactions: Array<Transaction>;\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery';\n  block?: Maybe<Block>;\n  blocks: Array<Block>;\n};\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>;\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  blockQuery?: Maybe<BlockQuery>;\n  transactionQuery?: Maybe<TransactionQuery>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  actions: Array<Action>;\n  id: Scalars['ID'];\n  nonce: Scalars['Int'];\n  publicKey: Scalars['ByteString'];\n  signature: Scalars['ByteString'];\n  signer: Scalars['Address'];\n  timestamp: Scalars['DateTimeOffset'];\n  updatedAddresses: Array<Scalars['Address']>;\n};\n\nexport type TransactionQuery = {\n  __typename?: 'TransactionQuery';\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n};\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\nexport type BlockCommonFragment = { __typename?: 'Block' } & Pick<\n  Block,\n  'hash' | 'index' | 'difficulty' | 'timestamp'\n>;\n\nexport type TransactionCommonFragment = { __typename?: 'Transaction' } & Pick<\n  Transaction,\n  | 'id'\n  | 'nonce'\n  | 'publicKey'\n  | 'signature'\n  | 'signer'\n  | 'timestamp'\n  | 'updatedAddresses'\n> & {\n    actions: Array<\n      { __typename?: 'Action' } & {\n        arguments: Array<\n          { __typename?: 'ActionArgumentType' } & Pick<\n            ActionArgumentType,\n            'key' | 'value'\n          >\n        >;\n      }\n    >;\n  };\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  excludeEmptyTxs: Scalars['Boolean'];\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type BlockListQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<\n        { __typename?: 'Block' } & Pick<Block, 'miner'> & {\n            transactions: Array<\n              { __typename?: 'Transaction' } & Pick<Transaction, 'id'>\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type BlockListByMinerQueryVariables = {\n  miner?: Maybe<Scalars['Address']>;\n};\n\nexport type BlockListByMinerQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<{ __typename?: 'Block' } & BlockCommonFragment>;\n    }\n  >;\n};\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockByHashQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      block: Maybe<\n        { __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & {\n            previousBlock: Maybe<\n              { __typename?: 'Block' } & Pick<Block, 'hash'>\n            >;\n            transactions: Array<\n              { __typename?: 'Transaction' } & TransactionCommonFragment\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc: Scalars['Boolean'];\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n};\n\nexport type TransactionListQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionByIdQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transaction: Maybe<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>;\n};\n\nexport type TransactionsByAccountQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\nexport const BlockCommonFragmentDoc = gql`\n  fragment BlockCommon on Block {\n    hash\n    index\n    difficulty\n    timestamp\n  }\n`;\nexport const TransactionCommonFragmentDoc = gql`\n  fragment TransactionCommon on Transaction {\n    actions {\n      arguments {\n        key\n        value\n      }\n    }\n    id\n    nonce\n    publicKey\n    signature\n    signer\n    timestamp\n    updatedAddresses\n  }\n`;\nexport const BlockListDocument = gql`\n  query BlockList(\n    $offset: Int!\n    $limit: Int!\n    $excludeEmptyTxs: Boolean!\n    $miner: Address\n  ) {\n    blockQuery {\n      blocks(\n        desc: true\n        offset: $offset\n        limit: $limit\n        excludeEmptyTxs: $excludeEmptyTxs\n        miner: $miner\n      ) {\n        ...BlockCommon\n        miner\n        transactions {\n          id\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListQuery,\n    BlockListQueryVariables\n  >,\n  'query'\n> &\n  ({ variables: BlockListQueryVariables; skip?: boolean } | { skip: boolean });\n\nexport const BlockListComponent = (props: BlockListComponentProps) => (\n  <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables>\n    query={BlockListDocument}\n    {...props}\n  />\n);\n\nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListQuery,\n  BlockListQueryVariables\n> &\n  TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >(BlockListDocument, {\n    alias: 'withBlockList',\n    ...operationOptions,\n  });\n}\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<\n  BlockListQuery,\n  BlockListQueryVariables\n>;\nexport const BlockListByMinerDocument = gql`\n  query BlockListByMiner($miner: Address) {\n    blockQuery {\n      blocks(miner: $miner) {\n        ...BlockCommon\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListByMinerComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockListByMinerComponent = (\n  props: BlockListByMinerComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables\n  >\n    query={BlockListByMinerDocument}\n    {...props}\n  />\n);\n\nexport type BlockListByMinerProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListByMinerQuery,\n  BlockListByMinerQueryVariables\n> &\n  TChildProps;\nexport function withBlockListByMiner<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables,\n    BlockListByMinerProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListByMinerQuery,\n    BlockListByMinerQueryVariables,\n    BlockListByMinerProps<TChildProps>\n  >(BlockListByMinerDocument, {\n    alias: 'withBlockListByMiner',\n    ...operationOptions,\n  });\n}\nexport type BlockListByMinerQueryResult = ApolloReactCommon.QueryResult<\n  BlockListByMinerQuery,\n  BlockListByMinerQueryVariables\n>;\nexport const BlockByHashDocument = gql`\n  query BlockByHash($hash: ID) {\n    blockQuery {\n      block(hash: $hash) {\n        ...BlockCommon\n        miner\n        nonce\n        previousBlock {\n          hash\n        }\n        transactions {\n          ...TransactionCommon\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n  ${TransactionCommonFragmentDoc}\n`;\nexport type BlockByHashComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockByHashQuery,\n    BlockByHashQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n  <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables>\n    query={BlockByHashDocument}\n    {...props}\n  />\n);\n\nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n> &\n  TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >(BlockByHashDocument, {\n    alias: 'withBlockByHash',\n    ...operationOptions,\n  });\n}\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n>;\nexport const TransactionListDocument = gql`\n  query TransactionList(\n    $signer: Address\n    $involvedAddress: Address\n    $desc: Boolean!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    transactionQuery {\n      transactions(\n        signer: $signer\n        involvedAddress: $involvedAddress\n        desc: $desc\n        offset: $offset\n        limit: $limit\n      ) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >,\n  'query'\n> &\n  (\n    | { variables: TransactionListQueryVariables; skip?: boolean }\n    | { skip: boolean });\n\nexport const TransactionListComponent = (\n  props: TransactionListComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >\n    query={TransactionListDocument}\n    {...props}\n  />\n);\n\nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionListQuery,\n  TransactionListQueryVariables\n> &\n  TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >(TransactionListDocument, {\n    alias: 'withTransactionList',\n    ...operationOptions,\n  });\n}\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<\n  TransactionListQuery,\n  TransactionListQueryVariables\n>;\nexport const TransactionByIdDocument = gql`\n  query TransactionById($id: ID) {\n    transactionQuery {\n      transaction(id: $id) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionByIdComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionByIdComponent = (\n  props: TransactionByIdComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >\n    query={TransactionByIdDocument}\n    {...props}\n  />\n);\n\nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n> &\n  TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >(TransactionByIdDocument, {\n    alias: 'withTransactionById',\n    ...operationOptions,\n  });\n}\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n>;\nexport const TransactionsByAccountDocument = gql`\n  query TransactionsByAccount($involvedAddress: Address) {\n    transactionQuery {\n      transactions(involvedAddress: $involvedAddress, desc: true) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionsByAccountComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionsByAccountComponent = (\n  props: TransactionsByAccountComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >\n    query={TransactionsByAccountDocument}\n    {...props}\n  />\n);\n\nexport type TransactionsByAccountProps<\n  TChildProps = {}\n> = ApolloReactHoc.DataProps<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n> &\n  TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >(TransactionsByAccountDocument, {\n    alias: 'withTransactionsByAccount',\n    ...operationOptions,\n  });\n}\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n>;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import React from 'react';\nimport { navigate } from 'gatsby';\nimport {\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from '@fluentui/react/lib/DetailsList';\nimport { ShimmeredDetailsList } from '@fluentui/react/lib/ShimmeredDetailsList';\nimport { Block } from '../generated/graphql';\n\ninterface BlockListProps {\n  blocks: Block[] | null;\n  loading: boolean;\n  columns: IColumn[];\n}\n\nconst POLL_INTERVAL = 2000;\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks, loading, columns }) => (\n  <ShimmeredDetailsList\n    setKey=\"set\"\n    items={blocks === null || loading ? [] : blocks}\n    columns={columns}\n    selectionMode={SelectionMode.none}\n    layoutMode={DetailsListLayoutMode.justified}\n    isHeaderVisible={true}\n    enableShimmer={loading}\n    onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n  />\n);\n\nexport default BlockList;\n","import React from 'react';\n\nimport { css } from 'emotion';\nimport { DefaultButton } from '@fluentui/react';\n\ninterface OffsetSwitchProps {\n  newerHandler: () => void;\n  olderHandler: () => void;\n  disable: { older: boolean; newer: boolean };\n}\n\nconst OffsetSwitch: React.FC<OffsetSwitchProps> = ({\n  newerHandler,\n  olderHandler,\n  disable,\n}) => (\n  <div className=\"nav\">\n    <DefaultButton\n      onClick={newerHandler}\n      disabled={disable.older}\n      className={css`\n        margin-right: 5px;\n      `}>\n      &larr; Newer\n    </DefaultButton>\n    <DefaultButton disabled={disable.newer} onClick={olderHandler}>\n      Older &rarr;\n    </DefaultButton>\n  </div>\n);\n\nexport default OffsetSwitch;\n","import React from 'react';\nimport { Link } from '@fluentui/react';\nimport { IColumn } from '@fluentui/react/lib/DetailsList';\n\nimport Timestamp from '../components/Timestamp';\nimport { Block } from '../generated/graphql';\n\nexport const commonProps = {\n  isRowHeader: true,\n  isResizable: true,\n  isSorted: false,\n};\n\nexport const columns = [\n  {\n    key: 'columnIndex',\n    name: 'Index',\n    fieldName: 'index',\n    iconName: 'NumberSymbol',\n    isIconOnly: true,\n    minWidth: 5,\n    maxWidth: 41,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ index }: Block) => <>{Number(index).toLocaleString()}</>,\n  },\n  {\n    key: 'columnHash',\n    name: 'Block Hash',\n    fieldName: 'hash',\n    minWidth: 5,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ hash }: Block) => <Link href={`./block/${hash}`}>{hash}</Link>,\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp }: Block) => <Timestamp timestamp={timestamp} />,\n  },\n  {\n    key: 'coulmnMiner',\n    name: 'Miner',\n    fieldName: 'miner',\n    minWidth: 123,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ miner }: Block) => (\n      <Link href={`./account/${miner}`}>{miner}</Link>\n    ),\n  },\n  {\n    key: 'columnDifficulty',\n    name: 'Difficulty',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ difficulty }: Block) => (\n      <>{Math.floor(difficulty).toLocaleString()}</>\n    ),\n  },\n  {\n    key: 'columnTxNumber',\n    name: 'Tx #',\n    minWidth: 5,\n    maxWidth: 40,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ transactions }: Block) => <>{transactions.length}</>,\n  },\n];\n","import { useState } from 'react';\n\nimport useSearchParams from './useSearchParams';\n\nexport const limit = 21;\nexport default function useOffset(location: Location, keyName = 'offset') {\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const { offset = 0 } = searchParams;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      const newSearchParams = { ...searchParams };\n      delete newSearchParams[keyName];\n      setSearchParams(newSearchParams);\n    } else {\n      searchParams[keyName] = offset;\n      setSearchParams(searchParams);\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  return [offset, olderHandler, newerHandler] as const;\n}\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: any) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n"],"sourceRoot":""}
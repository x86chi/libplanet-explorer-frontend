{"version":3,"sources":["webpack:///./src/subpages/transaction.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx","webpack:///./src/components/Timestamp.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_misc_useQueryString__WEBPACK_IMPORTED_MODULE_1__","_generated_graphql__WEBPACK_IMPORTED_MODULE_2__","office_ui_fabric_react__WEBPACK_IMPORTED_MODULE_3__","_components_Timestamp__WEBPACK_IMPORTED_MODULE_4__","TransactionPage","_ref","location","_useQueryString","useQueryString","queryString","id","a","createElement","variables","_ref2","data","loading","error","Fragment","JSON","stringify","message","transaction","transactionQuery","signerLink","signer","nonce","publicKey","signature","href","timestamp","updatedAddresses","map","address","index","key","actions","action","arguments","argument","value","useMemo","search","substr","useCallback","path","pathname","withPrefix","length","navigate","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent","Timestamp","date","Date","formatOptions","dateStyle","timeStyle","now","string","toLocaleString","undefined","getFullYear","getMonth","getDate","toLocaleTimeString","dateTime","toISOString","title"],"mappings":"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","file":"component---src-subpages-transaction-tsx-f832d3f9a7570afc96d4.js","sourcesContent":["import React from 'react';\nimport useQueryString from '../misc/useQueryString';\nimport { TransactionByIdComponent } from '../generated/graphql';\nimport { Link } from 'office-ui-fabric-react';\nimport Timestamp from '../components/Timestamp';\n\ninterface TransactionPageProps {\n  location: Location;\n}\n\nconst TransactionPage: React.FC<TransactionPageProps> = ({ location }) => {\n  const [queryString, setQueryString] = useQueryString(location);\n  const id = queryString;\n  return (\n    <TransactionByIdComponent variables={{ id }}>\n      {({ data, loading, error }) => {\n        if (loading)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>Loading&hellip;</p>\n            </>\n          );\n        if (error)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>\n                Failed to load {id} - {JSON.stringify(error.message)}\n              </p>\n            </>\n          );\n        const { transaction } = data!.transactionQuery!;\n        if (!transaction)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>\n                No such transaction: <code>{id}</code>\n              </p>\n            </>\n          );\n        // FIXME: We'd better to use absolute paths and make Gatsby to\n        // automatically rebase these absolute paths on the PATH_PREFIX\n        // configuration.\n        const signerLink = `../account/?${transaction.signer}`;\n        return (\n          <>\n            <h2>Transaction Details</h2>\n            <dl>\n              <dt>Id</dt>\n              <dd>\n                <code>{transaction.id}</code>\n              </dd>\n              <dt>Nonce</dt>\n              <dd>{transaction.nonce} </dd>\n              <dt>Public Key</dt>\n              <dd>\n                <code>{transaction.publicKey}</code>\n              </dd>\n              <dt>Signature</dt>\n              <dd>\n                <code>{transaction.signature}</code>\n              </dd>\n              <dt>Signer</dt>\n              <dd>\n                <Link href={signerLink}>\n                  <code>{transaction.signer}</code>\n                </Link>\n              </dd>\n              <dt>Timestamp</dt>\n              <dd>\n                <Timestamp timestamp={transaction.timestamp} />\n              </dd>\n              <dt>Updated Addresses</dt>\n              {transaction.updatedAddresses.map((address, index) => (\n                <dd key={index}>\n                  {/*\n                  FIXME: We'd better to use absolute paths and make Gatsby to\n                  automatically rebase these absolute paths on the PATH_PREFIX\n                  configuration.\n                  */}\n                  <Link href={`../account/?${address}`}>\n                    <code>{address}</code>\n                  </Link>\n                </dd>\n              ))}\n              <dt>Actions</dt>\n              {transaction.actions.map((action, index) => (\n                <dd key={index}>\n                  <dl>\n                    {action.arguments.map(argument => (\n                      <React.Fragment key={argument.key}>\n                        <dt>{argument.key}</dt>\n                        <dd>\n                          <code> {JSON.stringify(argument.value)} </code>\n                        </dd>\n                      </React.Fragment>\n                    ))}\n                  </dl>\n                </dd>\n              ))}\n            </dl>\n          </>\n        );\n      }}\n    </TransactionByIdComponent>\n  );\n};\n\nexport default TransactionPage;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n   __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'> & { actions: Array<({ __typename?: 'Action' } & { arguments: Array<({ __typename?: 'ActionArgumentType' } & Pick<ActionArgumentType, 'key' | 'value'>)> })> });\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  actions {\n    arguments {\n      key\n      value\n    }\n  }\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs) {\n      ...BlockCommon\n      miner\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress, desc: true) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'>;\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const formatOptions: any = {\n    dateStyle: 'short',\n    timeStyle: 'short',\n  };\n  const now = new Date();\n  let string = date.toLocaleString(undefined, formatOptions);\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    string = date.toLocaleTimeString(undefined, formatOptions);\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {string}\n    </time>\n  );\n};\n\nexport default Timestamp;\n"],"sourceRoot":""}
schema {
  query: Query
}

type Action {
  arguments: [ActionArgumentType!]!
}

type ActionArgumentType {
  key: String!
  value: String!
}

type Block {
  difficulty: Int!
  hash: ID!
  index: Int!
  miner: Address!
  nonce: ByteString!
  previousBlock: Block
  timestamp: DateTimeOffset!
  transactions: [Transaction!]!
}

type Query {
  blockQuery: BlockQuery
  transactionQuery: TransactionQuery
}

type BlockQuery {
  block(hash: ID = null): Block
  blocks(
    desc: Boolean = false
    offset: Int = 0
    limit: Int = null
    excludeEmptyTxs: Boolean = false
    miner: Address = null
  ): [Block!]!
}

type TransactionQuery {
  transaction(id: ID = null): Transaction
  transactions(
    signer: Address = null
    involvedAddress: Address = null
    desc: Boolean = false
    offset: Int = 0
    limit: Int = null
  ): [Transaction!]!
}

scalar Address

scalar ByteString

# The `Date` scalar type represents a year, month and day in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

# The `DateTime` scalar type represents a date and time. `DateTime` expects
# timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

# The `DateTimeOffset` scalar type represents a date, time and offset from UTC.
# `DateTimeOffset` expects timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTimeOffset

scalar Decimal

# The `Milliseconds` scalar type
# represents a period of time represented as the total number of milliseconds.
scalar Milliseconds

# The `Seconds` scalar type
# represents a period of time represented as the total number of seconds.
scalar Seconds

type Transaction {
  actions: [Action!]!
  id: ID!
  nonce: Int!
  publicKey: ByteString!
  signature: ByteString!
  signer: Address!
  timestamp: DateTimeOffset!
  updatedAddresses: [Address!]!
}
